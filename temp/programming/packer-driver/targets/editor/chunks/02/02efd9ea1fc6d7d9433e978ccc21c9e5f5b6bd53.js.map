{"version":3,"sources":["file:///Users/yinshi/study/pfq/project/HeroClash/assets/src/resource/resourceManager.ts"],"names":["ResourceManager","loadResourcesFromLocalStorage","resourcesData","localStorage","getItem","storageResourceID","parsedData","JSON","parse","resourcesMap","Map","id","hasOwnProperty","set","console","log","Mutex","resourceMutexID","constructor","getInstance","instance","getResources","has","createDefaultResources","get","sleep","ms","Promise","resolve","setTimeout","updateResource","type","amount","lock","info","resources","stringify","saveResources","news","error","message","Error","unlock","checkResource","loadResources","resourcesStr","setItem","copper","evolutionStone","ironOre","battleSoulStone","hetianJade"],"mappings":"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","sourcesContent":["// 资源管理模块\n\nimport { ResourceType, Resource } from \"./kind\";\nimport { Mutex } from \"../utils/mutex\";\n\n// 资源管理互斥锁ID\nconst resourceMutexID = \"resource\";\n// 存储下资源ID\nconst storageResourceID = \"resource\"\n\nfunction loadResourcesFromLocalStorage(): Map<string, Resource> {\n    const resourcesData = localStorage.getItem(storageResourceID);\n\n    if (resourcesData) {\n        const parsedData: { [key: string]: Resource } = JSON.parse(resourcesData);\n        const resourcesMap = new Map<string, Resource>();\n\n        for (const id in parsedData) {\n            if (parsedData.hasOwnProperty(id)) {\n                resourcesMap.set(id, parsedData[id]);\n            }\n        }\n\n        return resourcesMap;\n    } else {\n        console.log('No resources found in localStorage');\n        return new Map<string, Resource>();\n    }\n}\n\n\n// 资源管理器类\nexport class ResourceManager {\n    // 资源管理器实例\n    private static instance: ResourceManager;\n    private resourcesMap: Map<string, Resource>;\n\n    private constructor() {\n        this.resourcesMap = loadResourcesFromLocalStorage();\n    }\n\n    // 获取资源管理器的单例\n    public static getInstance(): ResourceManager {\n        if (!ResourceManager.instance) {\n            ResourceManager.instance = new ResourceManager();\n        }\n\n        return ResourceManager.instance;\n    }\n\n    // 获取指定ID资源\n    public getResources(): Resource {\n        if (!this.resourcesMap.has(storageResourceID)) {\n            // 如果资源不存在，则创建默认资源\n            console.log(\"not init\");\n            this.resourcesMap.set(id, this.createDefaultResources());\n            return this.createDefaultResources();\n        }\n\n        return this.resourcesMap.get(id)!;\n    }\n\n    public sleep(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // 更新指定的资源\n    public async updateResource(type: ResourceType, amount: number): Promise<void> {\n        try {\n            await Mutex.getInstance().lock(resourceMutexID);\n            console.info(\"update resource %s %d\", type, amount);\n            //await this.sleep(2000);\n            let resources = this.getResources(storageResourceID);\n            console.info(\"now resource %s\", JSON.stringify(resources));\n            resources[type] += amount;\n            // 保存更新后的资源\n            this.saveResources(resources);\n            let news = this.getResources(storageResourceID);\n            console.info(\"after set %s\", JSON.stringify(news));\n\n        } catch (error) {\n            console.error(\"Failed to update resource, err: %s\", error.message);\n            throw new Error(`Failed to update resource: ${error.message}`);\n        } finally {\n            // 不管怎样都尝试解锁\n            Mutex.getInstance().unlock(resourceMutexID);\n        }\n    }\n\n    // 检查指定ID的资源是否足够\n    public checkResource(id: string, type: ResourceType, amount: number): boolean {\n        const resources = this.getResources(id);\n        return resources[type] >= amount;\n    }\n\n    // 从本地存储加载指定ID资源\n    public loadResources(id: string): Resource {\n        const resourcesStr = localStorage.getItem(id);\n        if (resourcesStr) {\n            return JSON.parse(resourcesStr);\n        }\n\n        // 返回默认值\n        return this.createDefaultResources();\n    }\n\n    // 保存用户资源到本地存储\n    private saveResources(resources: Resource): boolean {\n        try {\n            console.info(\"set %s resources %s\", storageResourceID, JSON.stringify(resources));\n            localStorage.setItem(storageResourceID, JSON.stringify(resources));\n            return true;\n        } catch (error) {\n            console.error(\"save %s resources failed, error: %s\", storageResourceID, error.message);\n            return false;\n        }\n    }\n\n    // 创建默认的资源数据\n    private createDefaultResources(): Resource {\n        return {\n            copper: 0,\n            evolutionStone: 0,\n            ironOre: 0,\n            battleSoulStone: 0,\n            hetianJade: 0,\n        };\n    }\n}"]}