{"version":3,"sources":["file:///E:/GitHub/HeroClash/assets/src/resource/currency/manager.ts"],"names":["CurrencyManager","Mutex","VisibleError","ERROR_CODES","currencyMutexID","storageCurrencyID","constructor","currencyCache","getCurrencyFromStorage","getInstance","instance","getCurrencyFromCache","storedData","localStorage","getItem","JSON","parse","console","log","getDefaultCurrency","copper","evolutionStone","ironOre","battleSoulStone","hetianJade","checkResource","currency","key","Object","keys","Math","abs","updateResourceByKind","kind","amount","lock","info","currentCurrency","stringify","tmp","error","Error","saveResources","news","unlock","message","code","LOCK_FAILED","updateResource","setItem"],"mappings":"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","sourcesContent":["// 资源管理模块\n// 铜钱 进阶石 铁矿 战魂石 和田玉\nimport { CurrencyType, Currency } from \"./kind\";\nimport { Mutex } from \"../../utils/mutex\";\nimport { VisibleError, ERROR_CODES } from \"../../utils/errors\";\n\n// 货币资源互斥锁ID\nconst currencyMutexID = \"currency\";\n// 文件中的货币资源ID\nconst storageCurrencyID = \"currency\"\n\n// function sleep(ms: number): Promise<void> {\n//     return new Promise(resolve => setTimeout(resolve, ms));\n// }\n\n// 货币资源管理器\nexport class CurrencyManager {\n    // 货币资源管理器实例\n    private static instance: CurrencyManager;\n    // 货币缓存\n    private currencyCache: Currency;\n\n    private constructor() {\n        // 初始化缓存\n        this.currencyCache = this.getCurrencyFromStorage();\n    }\n\n    // 获取货币资源管理器的单例\n    public static getInstance(): CurrencyManager {\n        if (!CurrencyManager.instance) {\n            CurrencyManager.instance = new CurrencyManager();\n        }\n\n        return CurrencyManager.instance;\n    }\n\n    // 获取货币缓存\n    public getCurrencyFromCache(): Currency {\n        return this.currencyCache;\n    }\n\n    // 从存储中获取货币\n    public getCurrencyFromStorage(): Currency {\n        const storedData = localStorage.getItem(storageCurrencyID);\n        if (storedData) {\n            return JSON.parse(storedData);\n        }\n\n        console.log(\"not init currency resource, return default currency\");\n        return this.getDefaultCurrency();\n    }\n\n    // 获取默认的资源数据\n    private getDefaultCurrency(): Currency {\n        return {\n            copper: 0,\n            evolutionStone: 0,\n            ironOre: 0,\n            battleSoulStone: 0,\n            hetianJade: 0,\n        };\n    }\n\n    // 检查指定ID的资源是否足够\n    public checkResource(currency: Currency): boolean {\n        for (const key of Object.keys(currency) as (keyof Currency)[]) {\n            if (this.currencyCache[key] < Math.abs(currency[key])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // 更新指定货币资源，入参为增量资源\n    public updateResourceByKind(kind: CurrencyType, amount: number): void {\n        try {\n            Mutex.getInstance().lock(currencyMutexID);\n            console.info(\"update currency %s %s\", kind, amount);\n            let currentCurrency = this.getCurrencyFromStorage();\n            console.info(\"current currency %s\", JSON.stringify(currentCurrency));\n            let tmp = currentCurrency[kind] + amount;\n            if (tmp < 0) {\n                console.error(\"Failed to update currency, %s is not enough, current:%d, need: %d\",\n                    kind, currentCurrency[kind], Math.abs(amount));\n                throw new Error(`Failed to update currency: Insufficient resources`);\n            }\n\n            currentCurrency[kind] = tmp;\n            // 保存更新后的资源\n            this.saveResources(currentCurrency);\n            // 更新缓存\n            this.currencyCache = currentCurrency;\n            let news = this.getCurrencyFromStorage();\n            console.info(\"after set is %s\", JSON.stringify(news));\n            Mutex.getInstance().unlock(currencyMutexID);\n        } catch (error) {\n            console.error(\"Failed to update currency, err: %s\", error.message);\n            if (error instanceof VisibleError) {\n                // 非加锁失败的错误需要解锁\n                if (error.code != ERROR_CODES.LOCK_FAILED) {\n                    Mutex.getInstance().unlock(currencyMutexID);\n                }\n            }\n\n            throw new Error(`Failed to update currency: ${error.message}`);\n        }\n    }\n\n    // 更新货币资源，入参为增量资源\n    public updateResource(currency: Currency): void {\n        try {\n            Mutex.getInstance().lock(currencyMutexID);\n            console.info(\"update currency %s\", JSON.stringify(currency));\n            let currentCurrency = this.getCurrencyFromStorage();\n            console.info(\"current currency %s\", JSON.stringify(currentCurrency));\n            for (const key of Object.keys(currency) as (keyof Currency)[]) {\n                let tmp = currentCurrency[key] + currency[key];\n                if (tmp < 0) {\n                    console.error(\"Failed to update currency, %s is not enough, current:%d, need: %d\",\n                        key, currentCurrency[key], Math.abs(currency[key]));\n                    throw new Error(`Failed to update currency: Insufficient resources`);\n                }\n\n                currentCurrency[key] = tmp;\n            }\n            // 保存更新后的资源\n            this.saveResources(currentCurrency);\n            // 更新缓存\n            this.currencyCache = currentCurrency;\n            let news = this.getCurrencyFromStorage();\n            console.info(\"after set is %s\", JSON.stringify(news));\n            Mutex.getInstance().unlock(currencyMutexID);\n        } catch (error) {\n            console.error(\"Failed to update currency, err: %s\", error.message);\n            // 非加锁失败的错误需要解锁\n            if (!(error instanceof VisibleError) || error.code != ERROR_CODES.LOCK_FAILED) {\n                Mutex.getInstance().unlock(currencyMutexID);\n            }\n\n            throw new Error(`Failed to update currency: ${error.message}`);\n        }\n    }\n\n    // 保存资源到本地存储\n    private saveResources(currency: Currency) {\n        try {\n            console.info(\"set %s resources %s\", storageCurrencyID, JSON.stringify(currency));\n            localStorage.setItem(storageCurrencyID, JSON.stringify(currency));\n        } catch (error) {\n            console.error(\"save %s resources failed, error: %s\", storageCurrencyID, error.message);\n            throw new Error(`Failed to save currency: ${error.message}`);\n        }\n    }\n}"]}